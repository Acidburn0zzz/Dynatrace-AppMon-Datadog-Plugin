
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.compuwareapm.com/
  * For information how to publish a plugin please visit http://community.compuwareapm.com/plugins/contribute/
  **/ 

package com.gardner.datadogsubmitter;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.net.ssl.HttpsURLConnection;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.codec.binary.Base64;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import com.dynatrace.diagnostics.pdk.Plugin;
import com.dynatrace.diagnostics.pdk.Status;
import com.dynatrace.diagnostics.pdk.Task;
import com.dynatrace.diagnostics.pdk.TaskEnvironment;


public class DatadogSubmitter implements Task {

	private static final Logger log = Logger.getLogger(DatadogSubmitter.class.getName());
    private DocumentBuilderFactory factory;
    
    private String m_strMeasureAppendString = "";
    
	/**
	 * Initializes the Plugin. This method is called in the following cases:
	 * <ul>
	 * <li>before <tt>execute</tt> is called the first time for this
	 * scheduled Plugin</li>
	 * <li>before the next <tt>execute</tt> if <tt>teardown</tt> was called
	 * after the last execution</li>
	 * </ul>
	 *
	 * <p>
	 * If the returned status is <tt>null</tt> or the status code is a
	 * non-success code then {@link Plugin#teardown() teardown()} will be called
	 * next.
	 *
	 * <p>
	 * Resources like sockets or files can be opened in this method.
	 *
	 * @param env
	 *            the configured <tt>TaskEnvironment</tt> for this Plugin
	 * @see Plugin#teardown()
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 */
	@Override
	public Status setup(TaskEnvironment env) throws Exception
	{
		factory = DocumentBuilderFactory.newInstance();	
		return new Status(Status.StatusCode.Success);
	}

	/**
	 * Executes the Task Plugin.
	 *
	 * <p>
	 * This method is called at the scheduled intervals. If the Plugin execution
	 * takes longer than the schedule interval, subsequent calls to
	 * {@link #execute(TaskEnvironment)} will be skipped until this method
	 * returns. After the execution duration exceeds the schedule timeout,
	 * {@link TaskEnvironment#isStopped()} will return <tt>true</tt>. In this
	 * case execution should be stopped as soon as possible. If the Plugin
	 * ignores {@link TaskEnvironment#isStopped()} or fails to stop execution in
	 * a reasonable timeframe, the execution thread will be stopped ungracefully
	 * which might lead to resource leaks!
	 *
	 * @param env
	 *            a <tt>TaskEnvironment</tt> object that contains the Plugin
	 *            configuration
	 * @return a <tt>Status</tt> object that describes the result of the
	 *         method call
	 */
	@Override
	public Status execute(TaskEnvironment env) throws Exception
	{
		
		boolean bIsSecureURL = false; // Default to non-secure URL.
		
		String strDatadogAPIKey = env.getConfigPassword("datadogAPIKey");
		URL oDTBaseURL = env.getConfigUrl("dynatrace_base_url");
		String strDTUsername = env.getConfigString("dynatrace_dashboard_username");
		String strDTPassword = env.getConfigPassword("dynatrace_dashboard_user_password");
		String strDashboardName = env.getConfigString("dynatrace_dashboard_name");
		String strMeasuresToSend = env.getConfigString("dynatrace_measure_list");
		m_strMeasureAppendString = env.getConfigString("dt_measure_append_value");
		
		// FINE Logging
		log.fine("API Key: " + strDatadogAPIKey);
		log.fine("Base URL: " + oDTBaseURL.toString());
		log.fine("strDTUsername: " + strDTUsername);
		log.fine("strMeasuresToSend: " + strMeasuresToSend);
		log.fine("Append String: " + m_strMeasureAppendString);
		
		if (strMeasuresToSend == null | strMeasuresToSend.isEmpty())
		{
			log.severe("Missing Measures Input. Please check plugin configuration");
			return new Status(Status.StatusCode.ErrorInternalConfigurationProblem);
		}
		
		String[] astrInterestedInputArray = splitMeasureNames(strMeasuresToSend);
		
		List<DynatraceMeasure> oDynatraceMeasures = new ArrayList<DynatraceMeasure>();
		
		URL url = new URL(oDTBaseURL.toString()+URLEncoder.encode(strDashboardName,"UTF-8").replace("+", "%20"));
		
		HttpsURLConnection secureURLConnection = null;
		URLConnection nonSecureURLConnection = null;
		
		try
		{
			if (url.getProtocol().equals("https"))
			{
				bIsSecureURL = true;
				secureURLConnection = (HttpsURLConnection) url.openConnection();
				log.fine("Using Secure URL Connection");
			}
			else
			{
				nonSecureURLConnection = url.openConnection();
				log.fine("Using Non-Secure URL Connection");
			}
		}
		catch (Exception e)
		{
			log.severe("Error Opening URL connection to: " + url.toString());
			return new Status(Status.StatusCode.ErrorInfrastructureUnreachable);
		}
		
		String strEncoded = Base64.encodeBase64String((strDTUsername + ":" + strDTPassword).getBytes());
		String strUserPassEncodedVal = "Basic " + strEncoded;
		
		if (bIsSecureURL)
		{
			secureURLConnection.setRequestProperty("Authorization", strUserPassEncodedVal);
		}
		else
		{
			nonSecureURLConnection.setRequestProperty("Authorization", strUserPassEncodedVal);
		}
		
		DocumentBuilder oDocBuilder = factory.newDocumentBuilder();
		Document oDoc = null;
		try
		{
			if (bIsSecureURL)
			{
				oDoc = oDocBuilder.parse(secureURLConnection.getInputStream());
			}
			else
			{
				oDoc = oDocBuilder.parse(nonSecureURLConnection.getInputStream());
			}
		}
		catch (Exception e)
		{
			log.info("Error parsing Dashboard");
			log.info(e.getMessage());
			return new Status(Status.StatusCode.ErrorInfrastructureUnreachable);
		}
		
		if (oDoc == null)
		{
			log.severe("Dashboard Document object is null");
			return new Status(Status.StatusCode.ErrorInternalResourceUnavailable);
		}
		
		oDoc.getDocumentElement().normalize();
				
		NodeList nList = oDoc.getElementsByTagName("measure");
		
		if (nList.getLength() == 0)
		{
			log.fine("Found no <measure> tags. Have you added measures to your chart?");
			return new Status(Status.StatusCode.PartialSuccess);
		}
		
		
		for (int temp = 0; temp < nList.getLength(); temp++)
		{
			Element oElement = (Element) nList.item(temp);
			
			if (oElement.hasAttribute("measure"))
			{
				// Nothing interesting found. Skip this node and continue.
				// Only perform this check if the input is NOT set to send all measures.
				if (!strMeasuresToSend.contains("ALL_MEASURES")) if (!isInArray(oElement,astrInterestedInputArray)) continue;

				// We're in luck. It's a measure we're interested in.
				DynatraceMeasure oMeasure = new DynatraceMeasure(oElement);
				
				//If a measure has no data to send, don't bother processing it further.
				if (oMeasure.hasData()) oDynatraceMeasures.add(oMeasure);	
			}
		}
		
		String strPostData = buildPostData(oDynatraceMeasures);
		log.finer("Post Data: " + strPostData);
		
		if (oDynatraceMeasures.size() > 0)
		{
			try
			{
				submitToDataDog(strPostData, strDatadogAPIKey);
			}
			catch (Exception e)
			{
				log.severe("Exception caught sending POST to Datadog.");
				e.printStackTrace();
				return new Status(Status.StatusCode.PartialSuccess);
			}
		}
		else
		{
			// Only print if log level is more fine than default otherwise will lead to log spam.
			log.fine("No data. Not submitting");
		}
			return new Status(Status.StatusCode.Success);
	}

	/**
	 * Shuts the Plugin down and frees resources. This method is called in the
	 * following cases:
	 * <ul>
	 * <li>the <tt>setup</tt> method failed</li>
	 * <li>the Plugin configuration has changed</li>
	 * <li>the execution duration of the Plugin exceeded the schedule timeout</li>
	 * <li>the schedule associated with this Plugin was removed</li>
	 * </ul>
	 *
	 * <p>
	 * The Plugin methods <tt>setup</tt>, <tt>execute</tt> and
	 * <tt>teardown</tt> are called on different threads, but they are called
	 * sequentially. This means that the execution of these methods does not
	 * overlap, they are executed one after the other.
	 *
	 * <p>
	 * Examples:
	 * <ul>
	 * <li><tt>setup</tt> (failed) -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, configuration changes, <tt>execute</tt>
	 * ends -&gt; <tt>teardown</tt><br>
	 * on next schedule interval: <tt>setup</tt> -&gt; <tt>execute</tt> ...</li>
	 * <li><tt>execute</tt> starts, execution duration timeout,
	 * <tt>execute</tt> stops -&gt; <tt>teardown</tt></li>
	 * <li><tt>execute</tt> starts, <tt>execute</tt> ends, schedule is
	 * removed -&gt; <tt>teardown</tt></li>
	 * </ul>
	 * Failed means that either an unhandled exception is thrown or the status
	 * returned by the method contains a non-success code.
	 *
	 *
	 * <p>
	 * All by the Plugin allocated resources should be freed in this method.
	 * Examples are opened sockets or files.
	 *
	 * @see Task#setup(TaskEnvironment)
	 */
	@Override
	public void teardown(TaskEnvironment env) throws Exception {
	}
	
	//==================================
	//       PRIVATE METHODS
	//==================================
	
	private String[] splitMeasureNames(String strList)
	{
		String strNewLineChar = System.getProperty("line.separator");
		String[] aList = strList.split(strNewLineChar);
		
		return aList;
	}
	
	private boolean isInArray(Element oElement, String[] oInterestedArray)
	{
		String strMeasureVal = oElement.getAttribute("measure");
		
		// Return true if this is a measure we're interested in.
		for (String strVal : oInterestedArray) if (strMeasureVal.contains(strVal)) return true;
		
		return false;
	}
	
	private boolean isLastElement(int iCurrentPos, List oList)
	{
		int iFinalMeasurePos = oList.size()-1;
		if (iCurrentPos == iFinalMeasurePos) return true;
		return false;
	}
	
	private String buildPostData(List<DynatraceMeasure> oMeasureList)
	{
		/* *****************************************************
		 * Hint, use http://www.epochconverter.com/ to get Unix time in correct format.
		 *                  DATADOG POST CONTENT
		 *  { "series" :
         *  [{
         *  "metric":"test.metric",
         *    "points":[[TIMESLOT-UNIX, DATA],[TIMESLOT-UNIX,DATA],[100020],
         *   }
         *  ]
         *  }
         *******************************************************/

		StringBuilder oBuilder = new StringBuilder("{ \"series\" : [");
		
		int iMeasurePos = 0;
		
		for (DynatraceMeasure oMeasure : oMeasureList)
		{
			oBuilder.append("{\"metric\":\"" + oMeasure.getName() + m_strMeasureAppendString + "\", \"points\":[");
			
			int iPos = 0;
			List<DynatraceMeasurement> oTimeslots = oMeasure.getValues();
			for (DynatraceMeasurement oTimeslot : oTimeslots)
			{
				
				//Add separating comma but not to final timeslot (iPos = oTimeslots.size()-1) (breaks POST).
				if (!isLastElement(iPos, oTimeslots)) oBuilder.append("["+oTimeslot.getTimestamp() + ", " + oTimeslot.getValue()+"],");
				else oBuilder.append("["+oTimeslot.getTimestamp() + ", " + oTimeslot.getValue()+"]");
				iPos++;
			}
			
			// Add separating comma but not to final measure (iFinalMeasurePos = oMeasureList.size()-1) (breaks POST).
			if (!isLastElement(iMeasurePos,oMeasureList)) oBuilder.append("]},");
			else oBuilder.append("]}");
			
			iMeasurePos++;
		}
		oBuilder.append("]}");
		
		return oBuilder.toString();
	}
	
	// HTTP POST request
	private void submitToDataDog(String strPostData, String strAPIKey) throws Exception
	{
		HttpsURLConnection con = null;
		String url = "https://app.datadoghq.com/api/v1/series?api_key="+strAPIKey;
		try
		{
			URL obj = new URL(url);
			con = (HttpsURLConnection) obj.openConnection();
		}
		catch (Exception e)
		{
			log.info("Exception opening Datadog connection");
			log.info(e.getMessage());
			return;
		}
		
		if (con == null) log.severe("HttpsURLConnection con is null.");
		
		//add request header
		con.setRequestMethod("POST");
		con.setRequestProperty("Content-Type","application/json");
		
		// Send post request
		try
		{
			con.setDoOutput(true);
			DataOutputStream wr = new DataOutputStream(con.getOutputStream());
			wr.writeBytes(strPostData);
			wr.flush();
			wr.close();
		}
		catch (Exception e)
		{
			log.severe("Exception writing DataOutputStream to Datadog");
			log.severe(e.getMessage());
		}

		int responseCode = con.getResponseCode();
		log.finest("\nSending 'POST' request to URL : " + url);
		log.finest("Post parameters : " + strPostData);
		log.info("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(
		        new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();
	}
}
